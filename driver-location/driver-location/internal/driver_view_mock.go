// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockDriverViewMockById sync.RWMutex
)

// Ensure, that DriverViewMock does implement DriverView.
// If this is not the case, regenerate this file with moq.
var _ DriverView = &DriverViewMock{}

// DriverViewMock is a mock implementation of DriverView.
//
//     func TestSomethingThatUsesDriverView(t *testing.T) {
//
//         // make and configure a mocked DriverView
//         mockedDriverView := &DriverViewMock{
//             ByIdFunc: func(in1 string) (Driver, error) {
// 	               panic("mock out the ById method")
//             },
//         }
//
//         // use mockedDriverView in code that requires DriverView
//         // and then make assertions.
//
//     }
type DriverViewMock struct {
	// ByIdFunc mocks the ById method.
	ByIdFunc func(in1 string) (Driver, error)

	// calls tracks calls to the methods.
	calls struct {
		// ById holds details about calls to the ById method.
		ById []struct {
			// In1 is the in1 argument value.
			In1 string
		}
	}
}

// ById calls ByIdFunc.
func (mock *DriverViewMock) ById(in1 string) (Driver, error) {
	if mock.ByIdFunc == nil {
		panic("DriverViewMock.ByIdFunc: method is nil but DriverView.ById was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockDriverViewMockById.Lock()
	mock.calls.ById = append(mock.calls.ById, callInfo)
	lockDriverViewMockById.Unlock()
	return mock.ByIdFunc(in1)
}

// ByIdCalls gets all the calls that were made to ById.
// Check the length with:
//     len(mockedDriverView.ByIdCalls())
func (mock *DriverViewMock) ByIdCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockDriverViewMockById.RLock()
	calls = mock.calls.ById
	lockDriverViewMockById.RUnlock()
	return calls
}
