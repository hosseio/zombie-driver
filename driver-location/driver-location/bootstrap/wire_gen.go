// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package bootstrap

import (
	"github.com/chiguirez/cromberbus"
	"github.com/google/wire"
	"github.com/heetch/jose-odg-technical-test/driver-location/driver-location"
	"github.com/heetch/jose-odg-technical-test/driver-location/driver-location/cache"
	http2 "github.com/heetch/jose-odg-technical-test/driver-location/driver-location/http"
	"github.com/heetch/jose-odg-technical-test/driver-location/driver-location/messaging"
	"github.com/heetch/jose-odg-technical-test/driver-location/pkg"
	"net/http"
)

// Injectors from wire.go:

func InitializeServer(cfg Config) (*http.Server, error) {
	httpServerAddr := serverAddr(cfg)
	redisDriver, err := InitializeRedisDriver(cfg)
	if err != nil {
		return nil, err
	}
	driverBuilder := driver_location.NewDriverBuilder()
	transformer := driver_location.NewTransformer(driverBuilder)
	locationsByDriverAndTimeQueryService := driver_location.NewLocationsByDriverAndTimeQueryService(redisDriver, transformer)
	locationController := http2.NewLocationController(locationsByDriverAndTimeQueryService)
	healthController := http2.NewHealthController()
	router := http2.NewRouter(locationController, healthController)
	server := http2.NewServer(httpServerAddr, router)
	return server, nil
}

func InitializeRedisDriver(cfg Config) (cache.RedisDriver, error) {
	cacheRedisAddr := redisAddr(cfg)
	driverBuilder := driver_location.NewDriverBuilder()
	transformer := driver_location.NewTransformer(driverBuilder)
	redisDriver := cache.NewRedisDriver(cacheRedisAddr, transformer)
	return redisDriver, nil
}

func InitializeCreateDriverLocationNsqConsumer(cfg Config) (messaging.NsqConsumer, error) {
	nsqAddr := getNsqAddr(cfg)
	topicAddr := getTopicAddr(cfg)
	channelAddr := getChannelAddr(cfg)
	redisDriver, err := InitializeRedisDriver(cfg)
	if err != nil {
		return messaging.NsqConsumer{}, err
	}
	driverBuilder := driver_location.NewDriverBuilder()
	eventDispatcherMock := newEventDispatcherMock()
	createLocationCommandHandler := driver_location.NewCreateLocationCommandHandler(redisDriver, redisDriver, driverBuilder, eventDispatcherMock)
	mapHandlerResolver := InitializeMapHandlerResolver(createLocationCommandHandler)
	cromberBus := InitializeCromberbus(mapHandlerResolver)
	createDriverLocationHandler := messaging.NewCreateDriverLocationHandler(cromberBus)
	nsqConsumer := messaging.NewNsqConsumer(nsqAddr, topicAddr, channelAddr, createDriverLocationHandler)
	return nsqConsumer, nil
}

// wire.go:

var HttpSet = wire.NewSet(http2.NewServer, http2.NewRouter, http2.NewLocationController, http2.NewHealthController)

var CacheSet = wire.NewSet(cache.NewRedisDriver)

var AppSet = wire.NewSet(driver_location.NewLocationsByDriverAndTimeQueryService, driver_location.NewTransformer, wire.Bind(new(cromberbus.CommandHandlerResolver), cromberbus.MapHandlerResolver{}), wire.Bind(new(cromberbus.CommandBus), cromberbus.CromberBus{}), InitializeCromberbus,
	InitializeMapHandlerResolver, driver_location.NewCreateLocationCommandHandler, driver_location.NewDriverBuilder, wire.Bind(new(driver_location.LocationsByDriverAndTimeGetter), driver_location.LocationsByDriverAndTimeQueryService{}), wire.Bind(new(pkg.EventDispatcher), new(pkg.EventDispatcherMock)), newEventDispatcherMock,
)

func newEventDispatcherMock() *pkg.EventDispatcherMock {
	return &pkg.EventDispatcherMock{}
}

var MessagingSet = wire.NewSet(messaging.NewNsqConsumer, messaging.NewCreateDriverLocationHandler)

func serverAddr(cfg Config) http2.ServerAddr {
	return http2.ServerAddr(cfg.Server.Addr)
}

func InitializeCromberbus(handlerResolver cromberbus.CommandHandlerResolver) cromberbus.CromberBus {
	return cromberbus.NewCromberBus(handlerResolver)
}

func InitializeMapHandlerResolver(
	createLocationCommandHandler driver_location.CreateLocationCommandHandler,
) cromberbus.MapHandlerResolver {
	mapHandlerResolver := cromberbus.NewMapHandlerResolver()
	mapHandlerResolver.AddHandler(new(driver_location.CreateLocationCommand), createLocationCommandHandler)

	return mapHandlerResolver
}

func redisAddr(cfg Config) cache.RedisAddr {
	return cache.RedisAddr(cfg.Redis)
}

func getNsqAddr(cfg Config) messaging.NsqAddr {
	return messaging.NsqAddr(cfg.Nsq.Addr)
}

func getTopicAddr(cfg Config) messaging.TopicAddr {
	return messaging.TopicAddr(cfg.Nsq.Topic)
}

func getChannelAddr(cfg Config) messaging.ChannelAddr {
	return messaging.ChannelAddr(cfg.Nsq.Channel)
}
