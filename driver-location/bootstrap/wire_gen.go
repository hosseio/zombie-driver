// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package bootstrap

import (
	"github.com/google/wire"
	"github.com/heetch/jose-odg-technical-test/driver-location"
	"github.com/heetch/jose-odg-technical-test/driver-location/cache"
	http2 "github.com/heetch/jose-odg-technical-test/driver-location/http"
	"github.com/heetch/jose-odg-technical-test/driver-location/internal"
	"net/http"
)

// Injectors from wire.go:

func InitializeServer(cfg Config) (*http.Server, error) {
	httpServerAddr := serverAddr(cfg)
	redisDriver, err := InitializeRedisDriver(cfg)
	if err != nil {
		return nil, err
	}
	driverBuilder := driver_location.NewDriverBuilder()
	transformer := driver_location.NewTransformer(driverBuilder)
	locationsByDriverAndTimeQueryService := driver_location.NewLocationsByDriverAndTimeQueryService(redisDriver, transformer)
	locationController := http2.NewLocationController(locationsByDriverAndTimeQueryService)
	router := http2.NewRouter(locationController)
	server := http2.NewServer(httpServerAddr, router)
	return server, nil
}

func InitializeRedisDriver(cfg Config) (cache.RedisDriver, error) {
	cacheRedisAddr := redisAddr(cfg)
	driverBuilder := driver_location.NewDriverBuilder()
	transformer := driver_location.NewTransformer(driverBuilder)
	redisDriver := cache.NewRedisDriver(cacheRedisAddr, transformer)
	return redisDriver, nil
}

// wire.go:

var ServerSet = wire.NewSet(http2.NewServer, http2.NewRouter, http2.NewLocationController, InitializeRedisDriver, wire.Bind(new(domain.LocationView), cache.RedisDriver{}))

var RedisSet = wire.NewSet(driver_location.NewDriverBuilder)

var AppSet = wire.NewSet(driver_location.NewLocationsByDriverAndTimeQueryService, driver_location.NewTransformer)

func serverAddr(cfg Config) http2.ServerAddr {
	return http2.ServerAddr(cfg.Server.Addr)
}

func redisAddr(cfg Config) cache.RedisAddr {
	return cache.RedisAddr(cfg.Redis)
}
