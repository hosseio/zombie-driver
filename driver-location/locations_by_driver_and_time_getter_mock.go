// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package driver_location

import (
	"sync"
	"time"
)

var (
	lockLocationsByDriverAndTimeGetterMockGet sync.RWMutex
)

// Ensure, that LocationsByDriverAndTimeGetterMock does implement LocationsByDriverAndTimeGetter.
// If this is not the case, regenerate this file with moq.
var _ LocationsByDriverAndTimeGetter = &LocationsByDriverAndTimeGetterMock{}

// LocationsByDriverAndTimeGetterMock is a mock implementation of LocationsByDriverAndTimeGetter.
//
//     func TestSomethingThatUsesLocationsByDriverAndTimeGetter(t *testing.T) {
//
//         // make and configure a mocked LocationsByDriverAndTimeGetter
//         mockedLocationsByDriverAndTimeGetter := &LocationsByDriverAndTimeGetterMock{
//             GetFunc: func(driverID string, from time.Time) ([]LocationDTO, error) {
// 	               panic("mock out the Get method")
//             },
//         }
//
//         // use mockedLocationsByDriverAndTimeGetter in code that requires LocationsByDriverAndTimeGetter
//         // and then make assertions.
//
//     }
type LocationsByDriverAndTimeGetterMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(driverID string, from time.Time) ([]LocationDTO, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// DriverID is the driverID argument value.
			DriverID string
			// From is the from argument value.
			From time.Time
		}
	}
}

// Get calls GetFunc.
func (mock *LocationsByDriverAndTimeGetterMock) Get(driverID string, from time.Time) ([]LocationDTO, error) {
	if mock.GetFunc == nil {
		panic("LocationsByDriverAndTimeGetterMock.GetFunc: method is nil but LocationsByDriverAndTimeGetter.Get was just called")
	}
	callInfo := struct {
		DriverID string
		From     time.Time
	}{
		DriverID: driverID,
		From:     from,
	}
	lockLocationsByDriverAndTimeGetterMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockLocationsByDriverAndTimeGetterMockGet.Unlock()
	return mock.GetFunc(driverID, from)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedLocationsByDriverAndTimeGetter.GetCalls())
func (mock *LocationsByDriverAndTimeGetterMock) GetCalls() []struct {
	DriverID string
	From     time.Time
} {
	var calls []struct {
		DriverID string
		From     time.Time
	}
	lockLocationsByDriverAndTimeGetterMockGet.RLock()
	calls = mock.calls.Get
	lockLocationsByDriverAndTimeGetterMockGet.RUnlock()
	return calls
}
