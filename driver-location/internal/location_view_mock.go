// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
	"time"
)

var (
	lockLocationViewMockByDriverAndFromDate sync.RWMutex
)

// Ensure, that LocationViewMock does implement LocationView.
// If this is not the case, regenerate this file with moq.
var _ LocationView = &LocationViewMock{}

// LocationViewMock is a mock implementation of LocationView.
//
//     func TestSomethingThatUsesLocationView(t *testing.T) {
//
//         // make and configure a mocked LocationView
//         mockedLocationView := &LocationViewMock{
//             ByDriverAndFromDateFunc: func(in1 string, in2 time.Time) (LocationList, error) {
// 	               panic("mock out the ByDriverAndFromDate method")
//             },
//         }
//
//         // use mockedLocationView in code that requires LocationView
//         // and then make assertions.
//
//     }
type LocationViewMock struct {
	// ByDriverAndFromDateFunc mocks the ByDriverAndFromDate method.
	ByDriverAndFromDateFunc func(in1 string, in2 time.Time) (LocationList, error)

	// calls tracks calls to the methods.
	calls struct {
		// ByDriverAndFromDate holds details about calls to the ByDriverAndFromDate method.
		ByDriverAndFromDate []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 time.Time
		}
	}
}

// ByDriverAndFromDate calls ByDriverAndFromDateFunc.
func (mock *LocationViewMock) ByDriverAndFromDate(in1 string, in2 time.Time) (LocationList, error) {
	if mock.ByDriverAndFromDateFunc == nil {
		panic("LocationViewMock.ByDriverAndFromDateFunc: method is nil but LocationView.ByDriverAndFromDate was just called")
	}
	callInfo := struct {
		In1 string
		In2 time.Time
	}{
		In1: in1,
		In2: in2,
	}
	lockLocationViewMockByDriverAndFromDate.Lock()
	mock.calls.ByDriverAndFromDate = append(mock.calls.ByDriverAndFromDate, callInfo)
	lockLocationViewMockByDriverAndFromDate.Unlock()
	return mock.ByDriverAndFromDateFunc(in1, in2)
}

// ByDriverAndFromDateCalls gets all the calls that were made to ByDriverAndFromDate.
// Check the length with:
//     len(mockedLocationView.ByDriverAndFromDateCalls())
func (mock *LocationViewMock) ByDriverAndFromDateCalls() []struct {
	In1 string
	In2 time.Time
} {
	var calls []struct {
		In1 string
		In2 time.Time
	}
	lockLocationViewMockByDriverAndFromDate.RLock()
	calls = mock.calls.ByDriverAndFromDate
	lockLocationViewMockByDriverAndFromDate.RUnlock()
	return calls
}
