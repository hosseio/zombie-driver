// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package bootstrap

import (
	"github.com/google/wire"
	http2 "github.com/heetch/jose-odg-technical-test/gateway/http"
	"github.com/heetch/jose-odg-technical-test/gateway/messaging"
	"net/http"
)

// Injectors from wire.go:

func InitializeServer(cfg Config) (*http.Server, error) {
	httpServerAddr := serverAddr(cfg)
	v := getNSQEndpoints(cfg)
	nsqProducer, err := InitializeProducer(cfg)
	if err != nil {
		return nil, err
	}
	nsqController := http2.NewNSQController(v, nsqProducer)
	v2 := getRedirectEndpoints(cfg)
	redirectController := http2.NewRedirectController(v2)
	healthController := http2.NewHealthController()
	router := http2.NewRouter(nsqController, redirectController, healthController)
	server := http2.NewServer(httpServerAddr, router)
	return server, nil
}

func InitializeProducer(cfg Config) (messaging.NSQProducer, error) {
	nsqAddr := getNsqAddr(cfg)
	nsqProducer, err := messaging.NewNSQPRoducer(nsqAddr)
	if err != nil {
		return messaging.NSQProducer{}, err
	}
	return nsqProducer, nil
}

// wire.go:

var HttpSet = wire.NewSet(http2.NewServer, http2.NewRouter, http2.NewNSQController, http2.NewRedirectController, http2.NewHealthController)

var MessagingSet = wire.NewSet(messaging.NewNSQPRoducer)

func getNSQEndpoints(cfg Config) []http2.NSQEndpoint {
	endpoints2 := getEndpoints(cfg)

	return endpoints2.NSQEndpoints
}

func getRedirectEndpoints(cfg Config) []http2.RedirectEndpoint {
	endpoints2 := getEndpoints(cfg)

	return endpoints2.RedirectEndpoints
}

var endpoints *http2.Endpoints

func getEndpoints(cfg Config) http2.Endpoints {
	if endpoints != nil {
		return *endpoints
	}
	converter := NewURLConfigToRouterConverter()

	convert := converter.Convert(cfg.UrlConfig())
	endpoints = &convert

	return *endpoints
}

func serverAddr(cfg Config) http2.ServerAddr {
	return http2.ServerAddr(cfg.Server.Addr)
}

func getNsqAddr(cfg Config) messaging.NsqAddr {
	return messaging.NsqAddr(cfg.Nsq.Addr)
}
