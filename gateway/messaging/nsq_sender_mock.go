// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package messaging

import (
	"sync"
)

var (
	lockNSQSenderMockSendMessage sync.RWMutex
)

// Ensure, that NSQSenderMock does implement NSQSender.
// If this is not the case, regenerate this file with moq.
var _ NSQSender = &NSQSenderMock{}

// NSQSenderMock is a mock implementation of NSQSender.
//
//     func TestSomethingThatUsesNSQSender(t *testing.T) {
//
//         // make and configure a mocked NSQSender
//         mockedNSQSender := &NSQSenderMock{
//             SendMessageFunc: func(topic string, message []byte) error {
// 	               panic("mock out the SendMessage method")
//             },
//         }
//
//         // use mockedNSQSender in code that requires NSQSender
//         // and then make assertions.
//
//     }
type NSQSenderMock struct {
	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(topic string, message []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Topic is the topic argument value.
			Topic string
			// Message is the message argument value.
			Message []byte
		}
	}
}

// SendMessage calls SendMessageFunc.
func (mock *NSQSenderMock) SendMessage(topic string, message []byte) error {
	if mock.SendMessageFunc == nil {
		panic("NSQSenderMock.SendMessageFunc: method is nil but NSQSender.SendMessage was just called")
	}
	callInfo := struct {
		Topic   string
		Message []byte
	}{
		Topic:   topic,
		Message: message,
	}
	lockNSQSenderMockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	lockNSQSenderMockSendMessage.Unlock()
	return mock.SendMessageFunc(topic, message)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//     len(mockedNSQSender.SendMessageCalls())
func (mock *NSQSenderMock) SendMessageCalls() []struct {
	Topic   string
	Message []byte
} {
	var calls []struct {
		Topic   string
		Message []byte
	}
	lockNSQSenderMockSendMessage.RLock()
	calls = mock.calls.SendMessage
	lockNSQSenderMockSendMessage.RUnlock()
	return calls
}
