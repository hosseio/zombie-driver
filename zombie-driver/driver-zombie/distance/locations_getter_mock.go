// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package distance

import (
	"sync"
)

var (
	lockLocationsGetterMockGetLocations sync.RWMutex
)

// Ensure, that LocationsGetterMock does implement LocationsGetter.
// If this is not the case, regenerate this file with moq.
var _ LocationsGetter = &LocationsGetterMock{}

// LocationsGetterMock is a mock implementation of LocationsGetter.
//
//     func TestSomethingThatUsesLocationsGetter(t *testing.T) {
//
//         // make and configure a mocked LocationsGetter
//         mockedLocationsGetter := &LocationsGetterMock{
//             GetLocationsFunc: func(driverID string, lastMinutes int) (LocationList, error) {
// 	               panic("mock out the GetLocations method")
//             },
//         }
//
//         // use mockedLocationsGetter in code that requires LocationsGetter
//         // and then make assertions.
//
//     }
type LocationsGetterMock struct {
	// GetLocationsFunc mocks the GetLocations method.
	GetLocationsFunc func(driverID string, lastMinutes int) (LocationList, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLocations holds details about calls to the GetLocations method.
		GetLocations []struct {
			// DriverID is the driverID argument value.
			DriverID string
			// LastMinutes is the lastMinutes argument value.
			LastMinutes int
		}
	}
}

// GetLocations calls GetLocationsFunc.
func (mock *LocationsGetterMock) GetLocations(driverID string, lastMinutes int) (LocationList, error) {
	if mock.GetLocationsFunc == nil {
		panic("LocationsGetterMock.GetLocationsFunc: method is nil but LocationsGetter.GetLocations was just called")
	}
	callInfo := struct {
		DriverID    string
		LastMinutes int
	}{
		DriverID:    driverID,
		LastMinutes: lastMinutes,
	}
	lockLocationsGetterMockGetLocations.Lock()
	mock.calls.GetLocations = append(mock.calls.GetLocations, callInfo)
	lockLocationsGetterMockGetLocations.Unlock()
	return mock.GetLocationsFunc(driverID, lastMinutes)
}

// GetLocationsCalls gets all the calls that were made to GetLocations.
// Check the length with:
//     len(mockedLocationsGetter.GetLocationsCalls())
func (mock *LocationsGetterMock) GetLocationsCalls() []struct {
	DriverID    string
	LastMinutes int
} {
	var calls []struct {
		DriverID    string
		LastMinutes int
	}
	lockLocationsGetterMockGetLocations.RLock()
	calls = mock.calls.GetLocations
	lockLocationsGetterMockGetLocations.RUnlock()
	return calls
}
