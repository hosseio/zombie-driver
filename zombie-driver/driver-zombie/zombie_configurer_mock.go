// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package driver_zombie

import (
	"sync"
)

var (
	lockZombieConfigurerMockGetZombieConfig sync.RWMutex
	lockZombieConfigurerMockSetZombieConfig sync.RWMutex
)

// Ensure, that ZombieConfigurerMock does implement ZombieConfigurer.
// If this is not the case, regenerate this file with moq.
var _ ZombieConfigurer = &ZombieConfigurerMock{}

// ZombieConfigurerMock is a mock implementation of ZombieConfigurer.
//
//     func TestSomethingThatUsesZombieConfigurer(t *testing.T) {
//
//         // make and configure a mocked ZombieConfigurer
//         mockedZombieConfigurer := &ZombieConfigurerMock{
//             GetZombieConfigFunc: func() (ZombieConfigProjection, error) {
// 	               panic("mock out the GetZombieConfig method")
//             },
//             SetZombieConfigFunc: func(in1 ZombieConfigProjection) error {
// 	               panic("mock out the SetZombieConfig method")
//             },
//         }
//
//         // use mockedZombieConfigurer in code that requires ZombieConfigurer
//         // and then make assertions.
//
//     }
type ZombieConfigurerMock struct {
	// GetZombieConfigFunc mocks the GetZombieConfig method.
	GetZombieConfigFunc func() (ZombieConfigProjection, error)

	// SetZombieConfigFunc mocks the SetZombieConfig method.
	SetZombieConfigFunc func(in1 ZombieConfigProjection) error

	// calls tracks calls to the methods.
	calls struct {
		// GetZombieConfig holds details about calls to the GetZombieConfig method.
		GetZombieConfig []struct {
		}
		// SetZombieConfig holds details about calls to the SetZombieConfig method.
		SetZombieConfig []struct {
			// In1 is the in1 argument value.
			In1 ZombieConfigProjection
		}
	}
}

// GetZombieConfig calls GetZombieConfigFunc.
func (mock *ZombieConfigurerMock) GetZombieConfig() (ZombieConfigProjection, error) {
	if mock.GetZombieConfigFunc == nil {
		panic("ZombieConfigurerMock.GetZombieConfigFunc: method is nil but ZombieConfigurer.GetZombieConfig was just called")
	}
	callInfo := struct {
	}{}
	lockZombieConfigurerMockGetZombieConfig.Lock()
	mock.calls.GetZombieConfig = append(mock.calls.GetZombieConfig, callInfo)
	lockZombieConfigurerMockGetZombieConfig.Unlock()
	return mock.GetZombieConfigFunc()
}

// GetZombieConfigCalls gets all the calls that were made to GetZombieConfig.
// Check the length with:
//     len(mockedZombieConfigurer.GetZombieConfigCalls())
func (mock *ZombieConfigurerMock) GetZombieConfigCalls() []struct {
} {
	var calls []struct {
	}
	lockZombieConfigurerMockGetZombieConfig.RLock()
	calls = mock.calls.GetZombieConfig
	lockZombieConfigurerMockGetZombieConfig.RUnlock()
	return calls
}

// SetZombieConfig calls SetZombieConfigFunc.
func (mock *ZombieConfigurerMock) SetZombieConfig(in1 ZombieConfigProjection) error {
	if mock.SetZombieConfigFunc == nil {
		panic("ZombieConfigurerMock.SetZombieConfigFunc: method is nil but ZombieConfigurer.SetZombieConfig was just called")
	}
	callInfo := struct {
		In1 ZombieConfigProjection
	}{
		In1: in1,
	}
	lockZombieConfigurerMockSetZombieConfig.Lock()
	mock.calls.SetZombieConfig = append(mock.calls.SetZombieConfig, callInfo)
	lockZombieConfigurerMockSetZombieConfig.Unlock()
	return mock.SetZombieConfigFunc(in1)
}

// SetZombieConfigCalls gets all the calls that were made to SetZombieConfig.
// Check the length with:
//     len(mockedZombieConfigurer.SetZombieConfigCalls())
func (mock *ZombieConfigurerMock) SetZombieConfigCalls() []struct {
	In1 ZombieConfigProjection
} {
	var calls []struct {
		In1 ZombieConfigProjection
	}
	lockZombieConfigurerMockSetZombieConfig.RLock()
	calls = mock.calls.SetZombieConfig
	lockZombieConfigurerMockSetZombieConfig.RUnlock()
	return calls
}
