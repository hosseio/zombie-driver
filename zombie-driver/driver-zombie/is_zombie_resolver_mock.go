// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package driver_zombie

import (
	"sync"
)

var (
	lockIsZombieResolverMockResolve sync.RWMutex
)

// Ensure, that IsZombieResolverMock does implement IsZombieResolver.
// If this is not the case, regenerate this file with moq.
var _ IsZombieResolver = &IsZombieResolverMock{}

// IsZombieResolverMock is a mock implementation of IsZombieResolver.
//
//     func TestSomethingThatUsesIsZombieResolver(t *testing.T) {
//
//         // make and configure a mocked IsZombieResolver
//         mockedIsZombieResolver := &IsZombieResolverMock{
//             ResolveFunc: func(driverID string) bool {
// 	               panic("mock out the Resolve method")
//             },
//         }
//
//         // use mockedIsZombieResolver in code that requires IsZombieResolver
//         // and then make assertions.
//
//     }
type IsZombieResolverMock struct {
	// ResolveFunc mocks the Resolve method.
	ResolveFunc func(driverID string) bool

	// calls tracks calls to the methods.
	calls struct {
		// Resolve holds details about calls to the Resolve method.
		Resolve []struct {
			// DriverID is the driverID argument value.
			DriverID string
		}
	}
}

// Resolve calls ResolveFunc.
func (mock *IsZombieResolverMock) Resolve(driverID string) bool {
	if mock.ResolveFunc == nil {
		panic("IsZombieResolverMock.ResolveFunc: method is nil but IsZombieResolver.Resolve was just called")
	}
	callInfo := struct {
		DriverID string
	}{
		DriverID: driverID,
	}
	lockIsZombieResolverMockResolve.Lock()
	mock.calls.Resolve = append(mock.calls.Resolve, callInfo)
	lockIsZombieResolverMockResolve.Unlock()
	return mock.ResolveFunc(driverID)
}

// ResolveCalls gets all the calls that were made to Resolve.
// Check the length with:
//     len(mockedIsZombieResolver.ResolveCalls())
func (mock *IsZombieResolverMock) ResolveCalls() []struct {
	DriverID string
} {
	var calls []struct {
		DriverID string
	}
	lockIsZombieResolverMockResolve.RLock()
	calls = mock.calls.Resolve
	lockIsZombieResolverMockResolve.RUnlock()
	return calls
}
